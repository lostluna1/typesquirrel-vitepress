import{_ as o,c as l,o as r,ae as a}from"./chunks/framework.C5fWPVDY.js";const i="/typesquirrel-vitepress/assets/unnamed.zjPojvaI.png",c="/typesquirrel-vitepress/assets/obj.IeO_y5e2.png",t="/typesquirrel-vitepress/assets/a1.Bk779SI4.png",S=JSON.parse('{"title":"我该如何使用TypeSquirrel扩展","description":"","frontmatter":{},"headers":[],"relativePath":"markdown-examples.md","filePath":"markdown-examples.md"}'),s={name:"markdown-examples.md"};function p(d,e,u,n,m,_){return r(),l("div",null,[...e[0]||(e[0]=[a('<h1 id="我该如何使用typesquirrel扩展" tabindex="-1">我该如何使用TypeSquirrel扩展 <a class="header-anchor" href="#我该如何使用typesquirrel扩展" aria-label="Permalink to &quot;我该如何使用TypeSquirrel扩展&quot;">​</a></h1><p>本页说明了如何快速开始使用，需要注意的是：使用此扩展需要一定的编程门槛。</p><h2 id="前提" tabindex="-1">前提 <a class="header-anchor" href="#前提" aria-label="Permalink to &quot;前提&quot;">​</a></h2><p>你需要点击该链接下载最新版本的 <a href="https://code.visualstudio.com/docs/?dv=win64user" target="_blank" rel="noreferrer">Visual Studio Code</a>, 随后打开你的pvf，将sqr文件夹导出到任意位置,最后使用Visual Studio Code打开该文件夹。</p><ul><li>什么是<a href="https://www.runoob.com/vscode/vscode-intro.html" target="_blank" rel="noreferrer">Visual Studio Code</a>?</li></ul><h2 id="typesquirrel如何识别到class和成员方法" tabindex="-1">TypeSquirrel如何识别到class和成员方法？ <a class="header-anchor" href="#typesquirrel如何识别到class和成员方法" aria-label="Permalink to &quot;TypeSquirrel如何识别到class和成员方法？&quot;">​</a></h2><ul><li><p>是依赖一种叫<code>JSDoc</code>的东西，即：在函数声明上方添加注释文档来指定函数的参数类型、返回值类型，以及函数的含义描述，如下：</p><p><img src="'+i+'" alt="Sample Image"> 此时鼠标光标放置到<code>obj</code>参数上时会显示<code>obj</code>的类型为<code>IRDSQRCharacter</code>，并且可以通过<code>obj.</code>调用<code>IRDSQRCharacter</code>的成员方法。例如:<code>obj.getHp()</code><img src="'+c+'" alt="Sample Image"></p></li><li><p>全局函数</p><ul><li>对于全局函数，不需要任何JSDoc注释，直接使用即可获得代码补全和类型诊断。 例如：<code>sq_getJob(obj)</code></li></ul></li></ul><p>注意：使用 <code>public</code> 文件夹时无需在链接前加 <code>docs</code>，路径从站点根开始（例如 <code>/images/sample.svg</code>）。</p><ul><li>要如何快速生成JSDoc注释？ <ul><li>没有JSDoc注释的函数会被标记蓝色波浪线，鼠标悬停会提示“添加JSDoc注释”，点击即可自动生成JSDoc注释。</li></ul></li></ul><h2 id="typesquirrel中的类型" tabindex="-1">TypeSquirrel中的类型 <a class="header-anchor" href="#typesquirrel中的类型" aria-label="Permalink to &quot;TypeSquirrel中的类型&quot;">​</a></h2><ul><li><p>TypeSquirrel 可以通过分析代码中的类型信息，提供更智能的代码补全和错误提示。例如，当你输入一个变量名时，TypeSquirrel 会根据上下文推断出该变量的类型，并提供相应的成员方法和属性供你选择。 <img src="'+t+'" alt="Sample Image"></p></li><li><p><code>integer</code> 整数</p></li><li><p><code>integer[]</code> 整数数组</p></li><li><p><code>float</code> 浮点数</p></li><li><p><code>float[]</code> 浮点数数组</p></li><li><p><code>bool</code> 布尔值</p></li><li><p><code>bool[]</code> 布尔值数组</p></li><li><p><code>string</code> 字符串</p></li><li><p><code>string[]</code> 字符串数组</p></li><li><p><code>array</code> 数组</p></li><li><p><code>table</code> 表</p></li><li><p><code>function</code> 函数</p></li><li><p><code>class</code> 类</p></li></ul>',11)])])}const q=o(s,[["render",p]]);export{S as __pageData,q as default};
